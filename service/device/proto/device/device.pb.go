// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/device/proto/device/device.proto

/*
Package device is a generated protocol buffer package.

It is generated from these files:
	service/device/proto/device/device.proto

It has these top-level messages:
	Unit
	RawDeviceId
	RawDevice
	RawDevices
*/
package device

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Unit struct {
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RawDeviceId struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *RawDeviceId) Reset()                    { *m = RawDeviceId{} }
func (m *RawDeviceId) String() string            { return proto.CompactTextString(m) }
func (*RawDeviceId) ProtoMessage()               {}
func (*RawDeviceId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RawDeviceId) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RawDevice struct {
	ParentDeviceId int32 `protobuf:"varint,1,opt,name=parent_device_id,json=parentDeviceId" json:"parent_device_id,omitempty"`
	SubDeviceId    int32 `protobuf:"varint,2,opt,name=sub_device_id,json=subDeviceId" json:"sub_device_id,omitempty"`
	SubDeviceType  int32 `protobuf:"varint,3,opt,name=sub_device_type,json=subDeviceType" json:"sub_device_type,omitempty"`
}

func (m *RawDevice) Reset()                    { *m = RawDevice{} }
func (m *RawDevice) String() string            { return proto.CompactTextString(m) }
func (*RawDevice) ProtoMessage()               {}
func (*RawDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RawDevice) GetParentDeviceId() int32 {
	if m != nil {
		return m.ParentDeviceId
	}
	return 0
}

func (m *RawDevice) GetSubDeviceId() int32 {
	if m != nil {
		return m.SubDeviceId
	}
	return 0
}

func (m *RawDevice) GetSubDeviceType() int32 {
	if m != nil {
		return m.SubDeviceType
	}
	return 0
}

type RawDevices struct {
	Devices []*RawDevice `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *RawDevices) Reset()                    { *m = RawDevices{} }
func (m *RawDevices) String() string            { return proto.CompactTextString(m) }
func (*RawDevices) ProtoMessage()               {}
func (*RawDevices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RawDevices) GetDevices() []*RawDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func init() {
	proto.RegisterType((*Unit)(nil), "device.Unit")
	proto.RegisterType((*RawDeviceId)(nil), "device.RawDeviceId")
	proto.RegisterType((*RawDevice)(nil), "device.RawDevice")
	proto.RegisterType((*RawDevices)(nil), "device.RawDevices")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceService service

type DeviceServiceClient interface {
	GetRawDevices(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*RawDevices, error)
	AddRawDevice(ctx context.Context, in *RawDevice, opts ...grpc.CallOption) (*Unit, error)
	RemoveRawDevice(ctx context.Context, in *RawDeviceId, opts ...grpc.CallOption) (*Unit, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) GetRawDevices(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*RawDevices, error) {
	out := new(RawDevices)
	err := grpc.Invoke(ctx, "/device.DeviceService/GetRawDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) AddRawDevice(ctx context.Context, in *RawDevice, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := grpc.Invoke(ctx, "/device.DeviceService/AddRawDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RemoveRawDevice(ctx context.Context, in *RawDeviceId, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := grpc.Invoke(ctx, "/device.DeviceService/RemoveRawDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceServer interface {
	GetRawDevices(context.Context, *Unit) (*RawDevices, error)
	AddRawDevice(context.Context, *RawDevice) (*Unit, error)
	RemoveRawDevice(context.Context, *RawDeviceId) (*Unit, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_GetRawDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetRawDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/GetRawDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetRawDevices(ctx, req.(*Unit))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_AddRawDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).AddRawDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/AddRawDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).AddRawDevice(ctx, req.(*RawDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RemoveRawDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawDeviceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RemoveRawDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.DeviceService/RemoveRawDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RemoveRawDevice(ctx, req.(*RawDeviceId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRawDevices",
			Handler:    _DeviceService_GetRawDevices_Handler,
		},
		{
			MethodName: "AddRawDevice",
			Handler:    _DeviceService_AddRawDevice_Handler,
		},
		{
			MethodName: "RemoveRawDevice",
			Handler:    _DeviceService_RemoveRawDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/device/proto/device/device.proto",
}

func init() { proto.RegisterFile("service/device/proto/device/device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xd6, 0x46, 0x9c, 0x34, 0x56, 0x47, 0x0f, 0xa1, 0xa7, 0xb2, 0x82, 0x04, 0x84,
	0x8a, 0x2d, 0x08, 0x1e, 0x05, 0x41, 0x7a, 0x8d, 0x7a, 0x2e, 0x89, 0x3b, 0x87, 0x80, 0x36, 0x4b,
	0x76, 0x13, 0xe9, 0xd1, 0x5f, 0xe4, 0x5f, 0x14, 0x77, 0x9a, 0x6d, 0x34, 0xa7, 0x61, 0x1e, 0xdf,
	0x7b, 0xbb, 0xfb, 0x16, 0x12, 0x43, 0x55, 0x53, 0xbc, 0xd1, 0x8d, 0x22, 0x37, 0x74, 0x55, 0xda,
	0xb2, 0x5d, 0x78, 0xcc, 0x9d, 0x86, 0x01, 0x6f, 0x32, 0x80, 0xc3, 0xd7, 0x4d, 0x61, 0xe5, 0x25,
	0x84, 0x69, 0xf6, 0xf9, 0xe8, 0xc4, 0x95, 0xc2, 0x0b, 0x18, 0x35, 0xd9, 0x7b, 0x4d, 0xb1, 0x98,
	0x89, 0x64, 0x94, 0xf2, 0x22, 0xbf, 0x04, 0x1c, 0x7b, 0x0a, 0x13, 0x38, 0xd5, 0x59, 0x45, 0x1b,
	0xbb, 0xe6, 0xac, 0x75, 0xa1, 0x76, 0xf8, 0x09, 0xeb, 0x3e, 0x4d, 0x42, 0x64, 0xea, 0xbc, 0x83,
	0x1d, 0x38, 0x2c, 0x34, 0x75, 0xee, 0x99, 0x2b, 0x98, 0x74, 0x18, 0xbb, 0xd5, 0x14, 0x0f, 0x1d,
	0x15, 0x79, 0xea, 0x65, 0xab, 0x49, 0xde, 0x03, 0xf8, 0x2b, 0x18, 0xbc, 0x86, 0x23, 0x76, 0x98,
	0x58, 0xcc, 0x86, 0x49, 0xb8, 0x38, 0x9b, 0xef, 0x9e, 0xe9, 0xa1, 0xb4, 0x25, 0x16, 0xdf, 0x02,
	0x22, 0xd6, 0x9e, 0xb9, 0x26, 0x5c, 0x42, 0xf4, 0x44, 0xb6, 0x93, 0x37, 0x6e, 0xed, 0xbf, 0xa5,
	0x4c, 0xb1, 0x17, 0x66, 0xe4, 0x00, 0x6f, 0x61, 0xfc, 0xa0, 0xd4, 0xbe, 0x87, 0xfe, 0x91, 0xd3,
	0x3f, 0x31, 0x72, 0x80, 0x77, 0x30, 0x49, 0xe9, 0xa3, 0x6c, 0x68, 0xef, 0x3a, 0xef, 0xb9, 0x56,
	0xea, 0xbf, 0x2f, 0x0f, 0xdc, 0x67, 0x2d, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x47, 0x0d,
	0xea, 0xd8, 0x01, 0x00, 0x00,
}
